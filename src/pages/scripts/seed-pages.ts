// src/pages/scripts/seed-pages.ts
// Script ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u cho c√°c trang ch√≠nh s√°ch

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const SAMPLE_CONTENT = `
<div class="policy-content">
  <h2>N·ªôi dung m·∫´u</h2>
  <p>ƒê√¢y l√† n·ªôi dung m·∫´u cho trang n√†y. B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a n·ªôi dung n√†y th√¥ng qua CMS.</p>
  
  <h3>ƒêi·ªÅu kho·∫£n chung</h3>
  <ul>
    <li>ƒêi·ªÅu kho·∫£n 1: M√¥ t·∫£ chi ti·∫øt v·ªÅ ƒëi·ªÅu kho·∫£n</li>
    <li>ƒêi·ªÅu kho·∫£n 2: M√¥ t·∫£ chi ti·∫øt v·ªÅ ƒëi·ªÅu kho·∫£n</li>
    <li>ƒêi·ªÅu kho·∫£n 3: M√¥ t·∫£ chi ti·∫øt v·ªÅ ƒëi·ªÅu kho·∫£n</li>
  </ul>
  
  <h3>Quy ƒë·ªãnh</h3>
  <p>C√°c quy ƒë·ªãnh c·ª• th·ªÉ s·∫Ω ƒë∆∞·ª£c m√¥ t·∫£ chi ti·∫øt ·ªü ƒë√¢y. N·ªôi dung n√†y c√≥ th·ªÉ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√¥ng qua h·ªá th·ªëng CMS.</p>
  
  <h3>Li√™n h·ªá</h3>
  <p>N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá:</p>
  <ul>
    <li>Email: info@dieptra.com</li>
    <li>Hotline: 1900 xxxx</li>
    <li>ƒê·ªãa ch·ªâ: [ƒê·ªãa ch·ªâ c√¥ng ty]</li>
  </ul>
</div>
`;

async function seedPages() {
  try {
    console.log('üå± Starting to seed pages...');

    // 1. T·∫°o trang ch√≠nh "Ch√≠nh S√°ch Di·ªáp Tr√†"
    const mainPage = await prisma.pages.upsert({
      where: { slug: 'chinh-sach-diep-tra' },
      update: {},
      create: {
        slug: 'chinh-sach-diep-tra',
        title: 'Ch√≠nh S√°ch Di·ªáp Tr√†',
        content: `
<div class="main-policy-page">
  <h1>Ch√≠nh S√°ch Di·ªáp Tr√†</h1>
  <p>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi trang ch√≠nh s√°ch c·ªßa Di·ªáp Tr√†. T·∫°i ƒë√¢y, b·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu v·ªÅ c√°c ch√≠nh s√°ch, quy ƒë·ªãnh v√† ƒëi·ªÅu kho·∫£n c·ªßa ch√∫ng t√¥i.</p>
  
  <h2>Th√¥ng tin chung</h2>
  <p>Di·ªáp Tr√† cam k·∫øt mang ƒë·∫øn cho kh√°ch h√†ng nh·ªØng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao v√† d·ªãch v·ª• t·ªët nh·∫•t. C√°c ch√≠nh s√°ch c·ªßa ch√∫ng t√¥i ƒë∆∞·ª£c x√¢y d·ª±ng nh·∫±m b·∫£o v·ªá quy·ªÅn l·ª£i c·ªßa kh√°ch h√†ng v√† ƒë·∫£m b·∫£o s·ª± minh b·∫°ch trong m·ªçi giao d·ªãch.</p>
  
  <p>Vui l√≤ng ch·ªçn m·ª•c b·∫°n mu·ªën t√¨m hi·ªÉu t·ª´ menu b√™n tr√°i.</p>
</div>
        `,
        meta_title:
          'Ch√≠nh S√°ch Di·ªáp Tr√† - Th√¥ng tin v·ªÅ c√°c ch√≠nh s√°ch v√† quy ƒë·ªãnh',
        meta_description:
          'T√¨m hi·ªÉu v·ªÅ c√°c ch√≠nh s√°ch b·∫£o m·∫≠t, mua h√†ng, thanh to√°n, giao h√†ng v√† c√°c quy ƒë·ªãnh kh√°c c·ªßa Di·ªáp Tr√†.',
        display_order: 0,
        is_active: true,
        is_main_page: true,
        created_date: new Date(),
        updated_date: new Date(),
      },
    });

    console.log('‚úÖ Created main page:', mainPage.title);

    // 2. T·∫°o c√°c trang con
    const childPages = [
      {
        slug: 'chinh-sach-bao-mat',
        title: 'Ch√≠nh S√°ch B·∫£o M·∫≠t',
        meta_title: 'Ch√≠nh S√°ch B·∫£o M·∫≠t - Di·ªáp Tr√†',
        meta_description:
          'T√¨m hi·ªÉu v·ªÅ c√°ch Di·ªáp Tr√† b·∫£o v·ªá th√¥ng tin c√° nh√¢n v√† d·ªØ li·ªáu c·ªßa kh√°ch h√†ng.',
        display_order: 1,
        content: SAMPLE_CONTENT.replace('N·ªôi dung m·∫´u', 'Ch√≠nh S√°ch B·∫£o M·∫≠t'),
      },
      {
        slug: 'chinh-sach-mua-hang',
        title: 'Ch√≠nh S√°ch Mua H√†ng',
        meta_title: 'Ch√≠nh S√°ch Mua H√†ng - Di·ªáp Tr√†',
        meta_description:
          'H∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ quy tr√¨nh mua h√†ng, ƒë·∫∑t h√†ng t·∫°i Di·ªáp Tr√†.',
        display_order: 2,
        content: SAMPLE_CONTENT.replace('N·ªôi dung m·∫´u', 'Ch√≠nh S√°ch Mua H√†ng'),
      },
      {
        slug: 'chinh-sach-thanh-toan',
        title: 'Ch√≠nh S√°ch Thanh To√°n',
        meta_title: 'Ch√≠nh S√°ch Thanh To√°n - Di·ªáp Tr√†',
        meta_description:
          'Th√¥ng tin v·ªÅ c√°c ph∆∞∆°ng th·ª©c thanh to√°n ƒë∆∞·ª£c ch·∫•p nh·∫≠n t·∫°i Di·ªáp Tr√†.',
        display_order: 3,
        content: SAMPLE_CONTENT.replace(
          'N·ªôi dung m·∫´u',
          'Ch√≠nh S√°ch Thanh To√°n',
        ),
      },
      {
        slug: 'chinh-sach-giao-hang',
        title: 'Ch√≠nh S√°ch Giao H√†ng',
        meta_title: 'Ch√≠nh S√°ch Giao H√†ng - Di·ªáp Tr√†',
        meta_description:
          'Th√¥ng tin v·ªÅ d·ªãch v·ª• giao h√†ng, th·ªùi gian v√† ph√≠ v·∫≠n chuy·ªÉn c·ªßa Di·ªáp Tr√†.',
        display_order: 4,
        content: SAMPLE_CONTENT.replace('N·ªôi dung m·∫´u', 'Ch√≠nh S√°ch Giao H√†ng'),
      },
      {
        slug: 'chinh-sach-bao-hanh',
        title: 'Ch√≠nh S√°ch B·∫£o H√†nh',
        meta_title: 'Ch√≠nh S√°ch B·∫£o H√†nh - Di·ªáp Tr√†',
        meta_description:
          'Th√¥ng tin v·ªÅ ch√≠nh s√°ch b·∫£o h√†nh s·∫£n ph·∫©m t·∫°i Di·ªáp Tr√†.',
        display_order: 5,
        content: SAMPLE_CONTENT.replace('N·ªôi dung m·∫´u', 'Ch√≠nh S√°ch B·∫£o H√†nh'),
      },
      {
        slug: 'chinh-sach-doi-hang-tra-hang',
        title: 'Ch√≠nh S√°ch ƒê·ªïi/Tr·∫£ H√†ng',
        meta_title: 'Ch√≠nh S√°ch ƒê·ªïi/Tr·∫£ H√†ng - Di·ªáp Tr√†',
        meta_description:
          'H∆∞·ªõng d·∫´n v·ªÅ quy tr√¨nh ƒë·ªïi tr·∫£ h√†ng, ho√†n ti·ªÅn t·∫°i Di·ªáp Tr√†.',
        display_order: 6,
        content: SAMPLE_CONTENT.replace(
          'N·ªôi dung m·∫´u',
          'Ch√≠nh S√°ch ƒê·ªïi/Tr·∫£ H√†ng',
        ),
      },
      {
        slug: 'dieu-khoan-su-dung',
        title: 'ƒêi·ªÅu Kho·∫£n S·ª≠ D·ª•ng',
        meta_title: 'ƒêi·ªÅu Kho·∫£n S·ª≠ D·ª•ng - Di·ªáp Tr√†',
        meta_description:
          'C√°c ƒëi·ªÅu kho·∫£n v√† quy ƒë·ªãnh khi s·ª≠ d·ª•ng website v√† d·ªãch v·ª• c·ªßa Di·ªáp Tr√†.',
        display_order: 7,
        content: SAMPLE_CONTENT.replace('N·ªôi dung m·∫´u', 'ƒêi·ªÅu Kho·∫£n S·ª≠ D·ª•ng'),
      },
    ];

    for (const pageData of childPages) {
      const childPage = await prisma.pages.upsert({
        where: { slug: pageData.slug },
        update: {},
        create: {
          ...pageData,
          parent_id: mainPage.id,
          is_active: true,
          is_main_page: false,
          created_date: new Date(),
          updated_date: new Date(),
        },
      });

      console.log('‚úÖ Created child page:', childPage.title);
    }

    console.log('üéâ Pages seeding completed successfully!');
  } catch (error) {
    console.error('‚ùå Error seeding pages:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y script
seedPages();
